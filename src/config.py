# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

import argparse
import math
import os
import sys
import inspect


if True:
    PROJECT_PATH = os.path.abspath(os.path.join(__file__, "../.."))
    if PROJECT_PATH not in sys.path:
        sys.path.append(PROJECT_PATH)
    from src import util


def parse_command_line_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--input_dir', type=str, 
        default="data/problems/in_scope"
    )
    parser.add_argument(
        '--rate_limit_per_minute', type=int, default=20,
        help='Number of queries per minute'
    )
    parser.add_argument(
        '--num_retries', type=int, default=100,
        help='Number of Retries for a query'
    )
    parser.add_argument(
        '--temperature', type=float, default=0.8,
        help='Temperature for sampling'
    )
    parser.add_argument(
        '--max_model_capacity_tokens', type=int, default=4096,
        help='Maximum number of tokens that can be generated by the model'
    )
    parser.add_argument(
        '--max_tokens', type=int, default=512,
        help='Maximum number of tokens to be generted for completion'
    )
    parser.add_argument(
        '--model_name', type=str, default='gpt-3.5-turbo',
        help='Name of the model'
    )
    parser.add_argument(
        '--max_generations', type=int, default=100,
        help='Maximum number of generations, n in codex models.'
    )
    parser.add_argument(
        '--auto_truncate', action='store_true',
        help='Auto truncate the prompt'
    )
    parser.add_argument(
        '--output_dir', type=str, default='output', required=True,
        help='Output directory'
    )
    parser.add_argument('--verification_timeout', type=int, default=60,
        help='Timeout for verification'
    )
    parser.add_argument(
        '--max_allowed_time_per_example', type=float, default=600.,
        help='Max time to be spect to generate and validate each example'
    )
    parser.add_argument(
        '--do_not_redo_existing', action='store_true',
        help='Do not redo existing examples'
    )
    parser.add_argument('--refine_prompts', action='store_true')
    parser.add_argument(
        '--generation_type', type=str,
        default='breadth', choices=['breadth', 'depth', 'breadth_limited'],
    )
    parser.add_argument(
        '--ranker', type=str, default='verification',
        choices=['verification', 'ml']
    )
    parser.add_argument(
        '--ranker_model_path', type=str, default=None,
    )
    parser.add_argument(
        '--num_retries_for_syntactic_validity', type=int, default=20
    )
    parser.add_argument(
        '--disable_log', action='store_true'
    )
    parser.add_argument(
        '--parallel', action='store_true',
        help='Whether to use parallel processing'
    )
    parser.add_argument(
        '--workers', type=int, default=20,
        help='Number of threads to use for multi-processing'
    )
    parser.add_argument(
        '--max_depth', type=int, default=-1,
    )
    parser.add_argument(
        '--logger_name', type=str, default=None,
    )
    parser.add_argument(
        '--include_time_in_logger', action='store_true',
    )
    parser.add_argument(
        '--use_num_trial_as_limit', action='store_true'
    )
    parser.add_argument(
        '--num_trial_limit', type=int, default=-1
    )
    parser.add_argument(
        '--use_azure', action='store_true',
    )
    parser.add_argument(
        '--azure_config_file', type=str, default=None,
        help='Path to the azure config file in json format. The file must contain' +\
            'the following keys: ' +\
            'AZURE_OPENAI_API_KEY, ' +\
            'AZURE_BASE_URL, ' +\
            'AZURE_DEPLOYMENT, ' +\
            'AZURE_API_VERSION'
    )
    parser.add_argument(
        '--num_examples', type=int, default=None,
        help='Number of examples to process from' +\
        'the beginning of all examples. This will take precedence over' +\
        'the example_indices and example_prefix arguments'
    )
    parser.add_argument(
        '--example_indices', type=int, nargs='+',
        help='Indices of the example to process' +\
        'This will take precedence over the example_prefix argument'
    )
    parser.add_argument(
        '--example_prefix', type=str, default=None,
        nargs='+', help='Prefix of the example to process'
    )
    parser.add_argument(
        '--redact_ssa_through_prompt', action='store_true'
    )
    parser.add_argument(
        '--change_problem_to_redact_ssa', action='store_true'
    )
    parser.add_argument(
        '--do_not_change_problem', action='store_true'
    )
    parser.add_argument(
        "--do_not_deduplicate", action="store_true"
    )
    parser.add_argument(
        '--example_name_regex', type=str, default=None,
        help='Regular expression to filter of the example to process'
    )
    parser.add_argument(
        '--stop_early', action='store_true',
    )
    parser.add_argument(
        '--deduplicate', action='store_true',
    )
    # add folder of the parsed json files
    parser.add_argument(
        '--parsed_json_folder', type=str, default=None,
        help='Folder of the parsed json files'
    )
    # add c file content in the prompt
    parser.add_argument(
        '--add_c_file_content', action='store_true', 
        help='Add c file content in the prompt (for code2inv for now). Only works with --parsed_json_folder'
    )

    # drop sygus formula from prompt
    parser.add_argument(
        '--drop_sygus_formula', action='store_true', 
        help='Drop sygus formula from prompt (for code2inv for now). Only works with --parsed_json_folder'
    )

    args = parser.parse_args()
    logger = util.get_logger(
        name=args.logger_name,
        include_time_in_output_file=args.include_time_in_logger
    )
    if args.refine_prompts:
        logger.warn(
            "Argument --refine_prompts is deprecated.",
            "Use --generation_type depth instead.",
            "Possible values for --generation_type are: ",
            "breadth, depth, breadth_limited.",
            "Use depth for the same effect as --refine_prompts.",
            sep='\n'
        )
    if args.do_not_change_problem:
        args.change_problem_to_redact_ssa = False
        args.redact_ssa_through_prompt = False
    else:
        args.change_problem_to_redact_ssa = True
    
    if args.do_not_deduplicate:
        args.deduplicate = False
    else:
        args.deduplicate = True

    if args.max_depth < 0:
        args.max_depth = math.inf
    if args.use_num_trial_as_limit and args.num_trial_limit < args.max_generations:
        args.max_generations = args.num_trial_limit
    return args

def get_config(args=None):
    if Config.config is None:
        Config.config = Config()
    Config.config.attach_arguments(args)
    return Config.config

class Config:
    config = None
    
    def __init__(self):
        frame = inspect.stack()[1]
        if os.path.abspath(frame.filename) != os.path.abspath(__file__):
            raise RuntimeError(
                "Creating config object is prohibited.\n" +\
                "Use src.config.get_config() instead!"
            )

    def attach_arguments(self, args):
        for arg in vars(args):
            setattr(self, arg, getattr(args, arg))

    def __str__(self) -> str:
        r = f'{self.__class__.__name__}('
        values = []
        for arg in vars(self):
            if arg.startswith('get_') or arg.startswith('set_'):
                continue
            a = getattr(self, arg)
            values.append(f'{arg}={type(a), a}')
        r += ', '.join(values) + ')'
        return r


if __name__ == '__main__':
    args = parse_command_line_args()
    config = get_config(args)
    tokens = config.max_tokens
    print(tokens)

